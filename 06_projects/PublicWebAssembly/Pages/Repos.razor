@page "/repos/{UrlUniAddress}"
@page "/repos"
@using BackendAdapters.Models
@using BackendAdapters.Names
@using BackendAdapters.Operations
@using BackendAdapters.Workers
@using PublicWebAssembly.Components.ItemModels
@using PublicWebAssembly.Components
@using PublicWebAssembly.Workers

@inject NavigationManager NavigationManager

@* ↩ ↲ *@
@* https://www.alt-codes.net/arrow_alt_codes.php *@
@* ⟵.⟶ ◄.► ⬅.⮕ ⭠.? ?.➡ ?.⇉ *@
<div>
    Repo::
    <ComboBox02
        Items="AllRepoNames"
        SelectedItemChanged=@SelectedRepoNameChanged />
        @* @bind-SelectedItem=@SelectedRepoName/> *@
    @* OnValueChanged=@HandleValueChanged *@
</div>
<div>
    Loca::
    <input type="text" @bind=@inputLocaName />
</div>

<div class="menu-item">
    <input type="button" value="◄" @onclick=@OnBackArrowBtnClicked />
    <input type="button" value="↩" @onclick=@OnBackArrowBtnClicked />
    <input type="button" value="GO" @onclick=@OnGoBtnClicked />
    <input type="button" value="►" @onclick=@OnBackArrowBtnClicked />
</div>

<div class="menu-item">
    <div>Address: @ConvAddress(_item.Address)</div>
    <div>Type: @_item.Type</div>
    <div>Name: @_item.Name</div>
</div>

<div class="menu-item">
    <TextView @bind-Item=@_item ReloadItem=@ReloadItem @ref="textView"></TextView>
    <FolderView @bind-Item=@_item ReloadItem=@ReloadItem @ref="folderView"></FolderView>
</div>

@code {
    [Inject]
    private BackendAdapter Backend { get; set; }
    
    [Inject]
    private RepoAdapter Repo { get; set; }

    private ItemModel _item;
    private string inputLocaName = string.Empty;

    private TextView textView;
    private FolderView folderView;
    private UrlAddressParser _urlParser;

    [Parameter]
    public string? UrlUniAddress { get; set; }

    public Repos(RepoAdapter repo)
    {
        Repo = repo;
        SetAllRepos().GetAwaiter().GetResult();
    }

    private async Task SetAllRepos()
    {
        // var repo = new RepoAdapter(new BackendAdapter(new HttpClient()));
        // _urlParser = new UrlAddressParser(repo);
        //
        //
        

        string[] repoNamesJson = ["Temp01", "Temp02"];
        AllRepoNames = repoNamesJson.ToList();
        
        if (_item == null)
        {
            string firstRepo = AllRepoNames.First();
            _item = new ItemModel { Address = firstRepo };
        }
    }

    public List<string> AllRepoNames { get; set; }

    public string SelectedRepoName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var repoNamesJson2 = await Repo
            .GetAllReposNames();
        AllRepoNames = repoNamesJson2.ToList();
        
        // await SetAllRepos();
        _urlParser = new UrlAddressParser(Repo);
        
        (bool s01, ItemModel newItem) = 
            await _urlParser.GetItem(UrlUniAddress);

        bool pageReloadNeeded = _urlParser
            .IsPageReloadNeeded(newItem, UrlUniAddress, out string newUrl);
        if (pageReloadNeeded)
        {
            NavigationManager.NavigateTo(newUrl);
        }

        bool itemReloadNeeded = _urlParser
        .IsItemReloadNeeded(_item, newItem);
        if (itemReloadNeeded)
        {
            ReloadItem(newItem);
        }
    }

    protected async Task ReloadItem(
        (string Repo, string Loca) address)
    {
        string itemJString = await GetItem(address);
        ItemModel? itemObj = IFrontendOperations.Json
        .TryDeserializeObject<ItemModel>(itemJString);
        if (itemObj != null)
        {
            ReloadItem(itemObj);
        }
    }

    protected void ReloadItem(
    ItemModel itemObj)
    {
        _item = itemObj;
        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(_item.Address);
        inputLocaName = adrTuple.Item2;

        if (folderView != null)
        {
            folderView.Item = _item;
        }

        if (textView != null)
        {
            textView.Item = _item;
        }
    }

    protected void ReloadItem(
        ItemModel item,
        bool reloadState)
    {
        if (item == null)
        {
        return;
        }

        _item = item;
        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(item.Address);
        inputLocaName = adrTuple.Item2;

        if (folderView != null)
        {
        folderView.Item = item;
        }

        if (textView != null)
        {
        textView.Item = item;
        }

        StateHasChanged();
    }

    public async Task OnGoBtnClicked(MouseEventArgs e)
    {
        (string, string) address = (SelectedRepoName, inputLocaName);
        await ReloadItem(address);
    }

    public async Task<string> GetItem(
        (string Repo, string Loca) address)
    {
        string itemJson = await Backend.InvokeStringArgsApi(
        [SNames.RepoService, SNames.ItemWorker, SNames.GetItem,
            address.Repo,
            address.Loca]);
        return itemJson;
    }

    private async Task OnBackArrowBtnClicked(
        MouseEventArgs e)
    {
        string newAddress = IFrontendOperations
            .NoSqlAddress
            .MoveOneLocaBack(_item.Address);
        (string, string) newAdrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(newAddress);
        await ReloadItem(newAdrTuple);
    }

    private string ConvAddress(
        string itemAddress)
    {
        string result = itemAddress
            .Replace('/', '-');
        return result;
    }

    private void SelectedRepoNameChanged(
        string name)
    {
        SelectedRepoName = name;
    }

}

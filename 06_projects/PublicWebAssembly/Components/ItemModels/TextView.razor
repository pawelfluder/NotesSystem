@using BackendAdapters.Models
@using BackendAdapters.Names
@using BackendAdapters.Operations
@using BackendAdapters.Workers

@if (Item?.Type == myType)
{
    <div>
        <input type="button" value="Folder" @onclick="OnFolderClicked" />
        <input type="button" value="Content" @onclick="ContentClicked" />
        <input type="button" value="Config" @onclick="ConfigClicked" />
        <input type="button" value="Terminal" @onclick="TerminalClicked" />
        <div style="max-width: 100px;">
            <select @bind="@formGoogleDocType">
                <option value="Open">Open</option>
                <option value="Recreate">Recreate</option>
            </select>
            <input type="button" value="GoogleDoc" @onclick="GoogleDocClicked" />
        </div>
        <div style="max-width: 100px;">
            <input type="button" value="Tts" @onclick="TtsClicked" />
        </div>
    </div>

    <div>
        <input type="button" value="Add" @onclick="OnAddClicked" />
        <select @bind="@formAddType">
            <option value="Text">Up</option>
            <option value="Folder">Down</option>
        </select>
        <input type="text" @bind=@formAddValue>
    </div>


    <div>
        <CodeEditorTabs  Code="@item.Body.ToString()"></CodeEditorTabs>
    </div>
}

@code {
    [Inject]
    private BackendAdapter Backend { get; set; }
    
    [Inject]
    private RepoAdapter Repo { get; set; }
    
    [Inject]
    private ButtonActionsAdapter ButtonActions { get; set; }
    
    private string formAddType;
    private string formGoogleDocType;
    public ItemModel item;

    [Parameter]
    public ItemModel Item
    {
        get => item;
        set
        {
            item = value;
        }
    }

    [Parameter]
    public Action<ItemModel, bool> ReloadItem { get; set; }

    private string myType = "Text";

    private List<string> linesList;

    private string formAddValue;

    private int rows;

    protected override async Task OnInitializedAsync()
    {
        formGoogleDocType = "Open";
        formAddType = "Text";
        ReloadComponent();
    }

    private EventCallback<ItemModel> itemChanged;

    [Parameter]
    public EventCallback<ItemModel> ItemChanged
    {
        get => itemChanged;
        set
        {
            itemChanged = value;
            //ReloadComponent();
        }
    }

    private void ReloadComponent()
    {
        if (Item?.Body != null)
        {
            var tmp = Item?.Body.ToString();
            var lines = tmp.Split("\n").ToList();
            linesList = lines;
            rows = linesList.Count();
            //StateHasChanged();
        }
    }

    private async Task ContentClicked()
    {
        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(Item.Address);
        await ButtonActions.OpenBody(adrTuple);
    }

    private async Task ConfigClicked()
    {
        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(Item.Address);
        await ButtonActions.OpenConfig(adrTuple);
    }

    private async Task TerminalClicked()
    {
        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(Item.Address);
        await ButtonActions.OpenTerminal(adrTuple);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    private void TtsClicked()
    {
        //SpeechSynthesis.Speak("hello");
        var adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(Item.Address);
        Backend
            .InvokeStringArgsApi(
                SNames.TtsService,
                SNames.RepoTtsWorker,
                SNames.PlStartNew,
                adrTuple.Item1,
                adrTuple.Item2);
    }
    
    private void GoogleDocClicked()
    {
        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(Item.Address);
        if (formGoogleDocType == "Open")
        {
            // _backend
            //     .InvokeStringArgsApi(
            //         IGoogleDocsService,
            //         IGoogleDocsService,
            //         RepoTtsWorker.PlStartNew,
            //         adrTuple.Item1,
            //         adrTuple.Item2);
            // var itemJson = _backend.InvokeStringArgsApi("OpenGoogleDoc", adrTuple.Item1, adrTuple.Item2);
        }
        if (formGoogleDocType == "Recreate")
        {
            var itemJson = Backend.InvokeStringArgsApi("RecreateGoogleDoc", adrTuple.Item1, adrTuple.Item2);
        }
    }

    private async Task OnBtnClicked(
        string idxString)
    {
        var index = IFrontendOperations.TwoDigitsStr
            .TryToInt(idxString);
        var adrTuple = IFrontendOperations.NoSqlAddress
             .CreateAdrTupleFromAddress(Item.Address);
        var newAddress = IFrontendOperations.NoSqlAddress
            .JoinIndexWithLoca(adrTuple, index);

        (bool s01, ItemModel itemObj)  = await Repo.GetItem(newAddress);

        if (itemObj.Type != myType)
        {
            ReloadItem(itemObj, true);
            return;
        }
        
        ReloadItem(itemObj, false);
        Item = itemObj;
        ReloadComponent();
    }

    private void OnAddClicked()
    {
        if (string.IsNullOrEmpty(formAddValue))
        {
            return;
        }

        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(Item.Address);
        
        string param01 = adrTuple.Item1;
        string param02 = adrTuple.Item2;
        string param03 = formAddValue;
        string param04 = "";
        var item = Backend.InvokeStringArgsApi(
        [SNames.RepoService, SNames.ItemWorker, SNames.AppendLine,
            param01,
            param02,
            param03,
            param04]);
    }

    private async Task OnFolderClicked()
    {
        (string, string) adrTuple = IFrontendOperations
            .NoSqlAddress
            .CreateAdrTupleFromAddress(Item.Address);
        await ButtonActions.OpenItemFolder(adrTuple);
    }
}

@using BlazorUniSystemCore.Operations
@using BlazorUniSystemCore.Registrations
@using BlazorUniSystemCore.Repet.Models
@using SharpButtonActionsProg.AAPublic
@using SharpGoogleDocsProg.AAPublic
@using SharpOperationsProg.Operations.UniAddress
@using SharpRepoBackendProg.Services
@using SharpRepoServiceProg.AAPublic
@using SharpRepoServiceProg.Workers.APublic.ItemWorkers
@using SharpTtsServiceProg.AAPublic
@using SharpTtsServiceProg.Workers.Fasades

@* @rendermode InteractiveServer *@
@rendermode @(new InteractiveServerRenderMode(prerender: true))

@if (Item?.Type == myType)
{
    <div>
        <input type="button" value="Folder" @onclick="OnFolderClicked" />
        <input type="button" value="Content" @onclick="ContentClicked" />
        <input type="button" value="Config" @onclick="ConfigClicked" />
        <input type="button" value="Terminal" @onclick="TerminalClicked" />
        <div style="max-width: 100px;">
            <select @bind="@formGoogleDocType">
                <option value="Open">Open</option>
                <option value="Recreate">Recreate</option>
            </select>
            <input type="button" value="GoogleDoc" @onclick="GoogleDocClicked" />
        </div>
        <div style="max-width: 100px;">
            <input type="button" value="Tts" @onclick="TtsClicked" />
        </div>
    </div>

    <div>
        <input type="button" value="Add" @onclick="OnAddClicked" />
        <select @bind="@formAddType">
            <option value="Text">Up</option>
            <option value="Folder">Down</option>
        </select>
        <input type="text" @bind=@formAddValue>
    </div>


    <div>
        <CodeEditorTabs  Code="@item.Body.ToString()"></CodeEditorTabs>
    </div>
}

@code {
    private IBackendService _backend;
    private string formAddType;
    private string formGoogleDocType;
    public ItemModel item;

    public TextView()
    {
        _backend = MyBorder.OutContainer.Resolve<IBackendService>();
    }

    [Parameter]
    public ItemModel Item
    {
        get => item;
        set
        {
            item = value;
        }
    }

    [Parameter]
    public Action<ItemModel, bool> ReloadItem { get; set; }

    private string myType = "Text";

    private List<string> linesList;

    private string formAddValue;

    private int rows;

    protected override async Task OnInitializedAsync()
    {
        formGoogleDocType = "Open";
        formAddType = "Text";
        ReloadComponent();
    }

    private EventCallback<ItemModel> itemChanged;

    [Parameter]
    public EventCallback<ItemModel> ItemChanged
    {
        get => itemChanged;
        set
        {
            itemChanged = value;
            //ReloadComponent();
        }
    }

    private void ReloadComponent()
    {
        if (Item?.Body != null)
        {
            var tmp = Item?.Body.ToString();
            var lines = tmp.Split("\n").ToList();
            linesList = lines;
            rows = linesList.Count();
            //StateHasChanged();
        }
    }

    private void ContentClicked()
    {
        var adrTuple = IUniAddressOperations
              .CreateAdrTupleFromAddress(Item.Address);
        _backend
            .InvokeStringArgsApi(
                nameof(IMainButtonActionsService),
                nameof(IFileWorker),
                nameof(IFileWorker.Open),
                adrTuple.Item1,
                adrTuple.Item2);
    }

    private void ConfigClicked()
    {
        (string, string) adrTuple = IUniAddressOperations
              .CreateAdrTupleFromAddress(Item.Address);
        _backend
            .InvokeStringArgsApi(
                nameof(IMainButtonActionsService),
                nameof(IFileWorker),
                nameof(IFileWorker.Open),
                adrTuple.Item1,
                adrTuple.Item2);
    }

    private void TerminalClicked()
    {
        (string, string) adrTuple = IUniAddressOperations
              .CreateAdrTupleFromAddress(Item.Address);
        _backend
            .InvokeStringArgsApi(
                nameof(IMainButtonActionsService),
                nameof(ITerminalWorker),
                nameof(ITerminalWorker.Open),
                adrTuple.Item1,
                adrTuple.Item2);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    private void TtsClicked()
    {
        //SpeechSynthesis.Speak("hello");
        var adrTuple = IUniAddressOperations
            .CreateAdrTupleFromAddress(Item.Address);
        _backend
            .InvokeStringArgsApi(
                nameof(ITtsService),
                nameof(RepoTtsWorker),
                nameof(RepoTtsWorker.PlStartNew),
                adrTuple.Item1,
                adrTuple.Item2);
    }
    
    private void GoogleDocClicked()
    {
        (string, string) adrTuple = IUniAddressOperations
              .CreateAdrTupleFromAddress(Item.Address);
        if (formGoogleDocType == "Open")
        {
            _backend
                .InvokeStringArgsApi(
                    nameof(IGoogleDocsService),
                    nameof(IGoogleDocsService.),
                    nameof(RepoTtsWorker.PlStartNew),
                    adrTuple.Item1,
                    adrTuple.Item2);
            var itemJson = _backend.InvokeStringArgsApi("OpenGoogleDoc", adrTuple.Item1, adrTuple.Item2);
        }
        if (formGoogleDocType == "Recreate")
        {
            var itemJson = _backend.InvokeStringArgsApi("RecreateGoogleDoc", adrTuple.Item1, adrTuple.Item2);
        }
    }

    private void OnBtnClicked(
        string idxString)
    {
        var index = _operations.Index.StringToIndex(idxString);
        var adrTuple = IUniAddressOperations
             .CreateAdrTupleFromAddress(Item.Address);
        var newAddress = _operations.Index.JoinIndexWithLoca(adrTuple, index);
        var itemJString = GetItem(newAddress);
        var itemObj = _operations.Json.TryDeserializeObject<ItemModel>(itemJString);

        if (itemObj.Type != myType)
        {
            ReloadItem(itemObj, true);
            return;
        }
        
        ReloadItem(itemObj, false);
        Item = itemObj;
        ReloadComponent();
    }

    private void OnAddClicked()
    {
        if (string.IsNullOrEmpty(formAddValue))
        {
            return;
        }

        (string, string) adrTuple = IUniAddressOperations
             .CreateAdrTupleFromAddress(Item.Address);
        
        string serviceName = nameof(IRepoService);
        string workerName = nameof(IItemWorker);
        string methodName = nameof(IItemWorker.AppendLine);
        string param01 = adrTuple.Item1;
        string param02 = adrTuple.Item2;
        string param03 = formAddValue;
        string param04 = "";
        string item = _backend.InvokeStringArgsApi(
        [serviceName, workerName, methodName,
            param01,
            param02,
            param03,
            param04]);
    }

    private void OnFolderClicked()
    {
        (string Repo, string Loca) adrTuple = INoSqlAddressOperations
             .CreateAdrTupleFromAddress(Item.Address);
        _backend
            .InvokeStringArgsApi(
                nameof(IMainButtonActionsService),
                nameof(IFolderWorker),
                nameof(IFolderWorker.Open),
                adrTuple.Repo,
                adrTuple.Loca);
    }

    public string GetItem((string Repo, string Loca) address)
    {
        var itemJson = _backend.InvokeStringArgsApi("GetItem", address.Repo, address.Loca);
        return itemJson;
    }
}

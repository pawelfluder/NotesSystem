@page "/{UrlUniAddress}"
@page "/"
@using SharpOperationsProg.Operations.UniAddress
@using SharpRepoBackendProg.Services
@using SharpRepoServiceProg.AAPublic
@using BlazorUniComponents
@using BlazorUniSystemCore.Registrations
@using BlazorUniSystemCore.Repet.Models
@using BlazorUniSystemCore.Components.Editor
@using SharpOperationsProg.AAPublic

@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="menu-item">
    <input type="button" value="<" @onclick=@OnBackArrowBtnClicked />
    <input type="button" value="Go" @onclick=@OnGoBtnClicked />
    Repo::
    <ComboBox02
        Items="AllRepoNames"
        @bind-SelectedItem=@ComboBoxRepoName/>
    @* OnValueChanged=@HandleValueChanged *@
    Loca::
    <input type="text" @bind=@inputLocaName />
</div>

<div class="menu-item">
    <div>Address: @ConvAddress(_item.Address)</div>
    <div>Type: @_item.Type</div>
    <div>Name: @_item.Name</div>
</div>

<div class="menu-item">
    <TextView @bind-Item=@_item ReloadItem=@ReloadItem @ref="textView"></TextView>
    <FolderView @bind-Item=@_item ReloadItem=@ReloadItem @ref="folderView"></FolderView>
</div>

@code {
    IRepoService _repoService;
    IOperationsService _operationsService;
    IBackendService _backendService;
    
    private ItemModel _item;
    private string inputLocaName = string.Empty;

    private TextView textView;
    private FolderView folderView;
    private readonly UrlAddressParser _urlParser;

    [Parameter]
    public string? UrlUniAddress { get; set; }

    public Home()
    {
        _repoService = MyBorder.OutContainer.Resolve<IRepoService>();
        _operationsService = MyBorder.OutContainer.Resolve<IOperationsService>();
        _backendService = MyBorder.OutContainer.Resolve<IBackendService>();
        _urlParser = new UrlAddressParser();
        
        AllRepoNames = _repoService.Methods.GetAllReposNames();
        if (_item == null)
        {
            string firstRepo = AllRepoNames.First();
            _item = new ItemModel { Address = firstRepo };
        }
    }

    public List<string> AllRepoNames { get; set; }

    public string ComboBoxRepoName
    {
        get;
        set;
    }

    protected override async Task OnInitializedAsync()
    {
        ItemModel newItem = new();
        _urlParser.GetItem(ref newItem, UrlUniAddress);
        
        bool pageReloadNeeded = _urlParser
            .IsPageReloadNeeded(newItem, UrlUniAddress, out string newUrl);
        if (pageReloadNeeded)
        {
            NavigationManager.NavigateTo(newUrl);
        }
        
        bool itemReloadNeeded = _urlParser
            .IsItemReloadNeeded(_item, newItem);
        if (itemReloadNeeded)
        {
            ReloadItem(newItem);
        }
    }

    protected void ReloadItem(
        (string Repo, string Loca) address)
    {
        string itemJString = GetItem(address);
        ItemModel? itemObj = _operationsService.Json
            .TryDeserializeObject<ItemModel>(itemJString);
        if (itemObj != null)
        {
            ReloadItem(itemObj);
        }
    }

    protected void ReloadItem(
        ItemModel itemObj)
    {
        _item = itemObj;
        (string, string) adrTuple = IUniAddressOperations
            .CreateAdrTupleFromAddress(_item.Address);
        inputLocaName = adrTuple.Item2;

        if (folderView != null)
        {
            folderView.Item = _item;
        }

        if (textView != null)
        {
            textView.Item = _item;
        }
    }

    protected void ReloadItem(
        ItemModel item,
        bool reloadState)
    {
        if (item == null)
        {
            return;
        }
        
        _item = item;
        (string, string) adrTuple = IUniAddressOperations
            .CreateAdrTupleFromAddress(item.Address);
        inputLocaName = adrTuple.Item2;
        
        if (folderView != null)
        {
            folderView.Item = item;
        }

        if (textView != null)
        {
            textView.Item = item;
        }

        StateHasChanged();
    }

    public void OnGoBtnClicked(MouseEventArgs e)
    {
        (string, string) address = (ComboBoxRepoName, inputLocaName);
        ReloadItem(address);
    }

    public string GetItem(
        (string Repo, string Loca) address)
    {
        string itemJson = _backendService
            .CommandApi(
                "GetItem",
                address.Repo,
                address.Loca);
        return itemJson;
    }

    private async Task OnBackArrowBtnClicked(
        MouseEventArgs e)
    {
        string newAddress = IUniAddressOperations
            .MoveOneLocaBack(_item.Address);
        (string, string) newAdrTuple = IUniAddressOperations
            .CreateAdrTupleFromAddress(newAddress);
        ReloadItem(newAdrTuple);
    }

    private string ConvAddress(
        string itemAddress)
    {
        string result = itemAddress
            .Replace('/', '-');
        return result;
    }
}

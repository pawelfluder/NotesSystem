@page "/{UrlUniAddress}"
@page "/"
@using System.Text.RegularExpressions
@using BlazorNotesSystem.Components.Editor
@using BlazorNotesSystem.Registrations
@using BlazorNotesSystem.Repet.Models
@using SharpOperationsProg.AAPublic.Operations
@using SharpOperationsProg.Operations.UniAddress
@using SharpRepoBackendProg.Services
@using SharpRepoServiceProg.AAPublic
@using BlazorUniComponents

@inject IBackendService backendService
@inject IOperationsService operationsService
@inject IRepoService repoService

@rendermode InteractiveServer

<div class="menu-item">
    <input type="button" value="<" @onclick=@OnBackArrowBtnClicked />
    <input type="button" value="Go" @onclick=@OnGoBtnClicked />
    Repo::
    <ComboBox02
        Items="AllRepoNames"
        @bind-SelectedItem=@ComboBoxRepoName/>
        @* OnValueChanged=@HandleValueChanged *@
    Loca::
    <input type="text" @bind=@inputLocaName />
</div>

<div class="menu-item">
    <div>Address: @_item.Address</div>
    <div>Type: @_item.Type</div>
    <div>Name: @_item.Name</div>
</div>

<div class="menu-item">
    <TextView @bind-Item=@_item ReloadItem=@ReloadItem @ref="textView"></TextView>
    <RefTextView @bind-Item=@_item ReloadItem=@ReloadItem @ref="refTextView"></RefTextView>
    <FolderView @bind-Item=@_item ReloadItem=@ReloadItem @ref="folderView"></FolderView>
</div>

@code {
    private ItemModel _item;
    private string inputLocaName = string.Empty;
    
    private TextView textView;
    private FolderView folderView;
    private RefTextView refTextView;
    
    [Parameter]
    public string? UrlUniAddress { get; set; }
    
    public Home()
    {
        IRepoService repoService2 = MyBorder.OutContainer.Resolve<IRepoService>();
        AllRepoNames = repoService2.Methods.GetAllReposNames();
        if (_item == null)
        {
            string firstRepo = AllRepoNames.First();
            _item = new ItemModel { Address = firstRepo };
        }
    }
    
    public List<string> AllRepoNames { get; set; }

    public string ComboBoxRepoName
    {
        get; 
        set;
    }

    protected override async Task OnInitializedAsync()
    {
        AllRepoNames = repoService.Methods.GetAllReposNames();
        (string, string) adrTuple = IUniAddressOperations
            .CreateAddressFromString(_item.Address);
        
        if (UrlUniAddress != null
            && IsAdressCorrect(UrlUniAddress))
        {
            adrTuple = IUniAddressOperations
                .CreateAddressFromUrlParameter(UrlUniAddress);
        }
        
        ReloadItem(adrTuple);
    }

    private bool IsAdressCorrect(
        string urlUniAddress)
    {
        string pattern = "^[A-Za-z0-9]{1,13}(\\/(0[0-9]{1,2}|[1-9][0-9]{1,2}))*$\n";
        Regex regex = new Regex(pattern);
        Match match = regex.Match(urlUniAddress);
        bool correct = match.Groups.Count > 0;
        return correct;
    }

    protected void ReloadItem((string Repo, string Loca) address)
    {
        string itemJString = GetItem(address);
        ItemModel? itemObj = operationsService.Json
            .TryDeserializeObject<ItemModel>(itemJString);
        if (itemObj != null)
        {
            ReloadItem(itemObj);
        }
    }

    protected void ReloadItem(ItemModel itemObj)
    {
        _item = itemObj;
        (string, string) adrTuple = IUniAddressOperations
            .CreateAddressFromString(_item.Address);
        inputLocaName = adrTuple.Item2;

        if (folderView != null)
        {
            folderView.Item = _item;
        }

        if (textView != null)
        {
            textView.Item = _item;
        }
    }

    protected void ReloadItem(ItemModel item, bool reloadState)
    {
        _item = item;
        (string, string) adrTuple = IUniAddressOperations
             .CreateAddressFromString(item.Address);
        inputLocaName = adrTuple.Item2;
        

        if (folderView != null)
        {
            folderView.Item = item;
        }

        if (textView != null)
        {
            textView.Item = item;
        }

        StateHasChanged();
    }

    public void OnGoBtnClicked(MouseEventArgs e)
    {
        (string, string) address = (ComboBoxRepoName, inputLocaName);
        ReloadItem(address);
    }

    public string GetItem((string Repo, string Loca) address)
    {
        string itemJson = backendService
            .CommandApi(
                "GetItem", 
                address.Repo,
                address.Loca);
        return itemJson;
    }

    private async Task OnBackArrowBtnClicked(MouseEventArgs e)
    {
        string newAddress = IUniAddressOperations
             .MoveOneLocaBack(_item.Address);
        (string, string) newAdrTuple = IUniAddressOperations
             .CreateAddressFromString(newAddress);
        ReloadItem(newAdrTuple);
    }
}

@page "/{UrlUniAddress}"
@page "/"
@using BlazorNotesSystem.Components.Editor
@using BlazorNotesSystem.Repet.Models
@using SharpOperationsProg.AAPublic.Operations
@using SharpOperationsProg.Operations.UniAddress
@using SharpRepoBackendProg.Service

@inject IBackendService backendService
@inject IOperationsService operationsService

@rendermode InteractiveServer

<div>
    <input type="button" value="<" @onclick="OnBackArrowBtnClicked" />
    <input type="button" value="Go" @onclick="OnGoBtnClicked" />
    Repo<input type="text" @bind=@formRepoName />
    Loca<input type="text" @bind=@formLocaName />
</div>

<div>
    Address: @item.Address
</div>

<div>
    Type: @item.Type
</div>

<div>
    Name: @item.Name
</div>

<div>
    <TextView @bind-Item=@item ReloadItem=@ReloadItem @ref="textView"></TextView>
    <RefTextView @bind-Item=@item ReloadItem=@ReloadItem @ref="refTextView"></RefTextView>
    <FolderView @bind-Item=@item ReloadItem=@ReloadItem @ref="folderView"></FolderView>
</div>

@code {
    private ItemModel item;
    private string formRepoName;
    private string formLocaName;
    private TextView textView;
    private RefTextView refTextView;
    private FolderView folderView;
    
    [Parameter]
    public string? UrlUniAddress { get; set; }
    
    public Home()
    {
        if (item == null)
        {
            item = new ItemModel() { Address = "Notki" };
        }
    }
    private bool IsMyType()
    {
        return true;
    }
    protected override async Task OnInitializedAsync()
    {
        (string, string) adrTuple = IUniAddressOperations
            .CreateAddressFromString(item.Address);
        
        if (UrlUniAddress != null)
        {
            adrTuple = IUniAddressOperations
                .CreateAddressFromUrlParameter(UrlUniAddress);
        }
        
        ReloadItem(adrTuple);
    }
    protected void ReloadItem((string Repo, string Loca) address)
    {
        var itemJString = GetItem(address);
        var itemObj = operationsService.Json.TryDeserializeObject<ItemModel>(itemJString);
        if (itemObj != null)
        {
            ReloadItem(itemObj);
        }
    }

    protected void ReloadItem(ItemModel itemObj)
    {
        item = itemObj;
        var adrTuple = IUniAddressOperations
            .CreateAddressFromString(item.Address);
        formRepoName = adrTuple.Item1;
        formLocaName = adrTuple.Item2;

        if (folderView != null)
        {
            folderView.Item = item;
        }

        if (textView != null)
        {
            textView.Item = item;
        }
    }

    protected void ReloadItem(ItemModel item, bool reloadState)
    {
        this.item = item;
        var adrTuple = IUniAddressOperations
             .CreateAddressFromString(item.Address);
        formRepoName = adrTuple.Item1;
        formLocaName = adrTuple.Item2;
        

        if (folderView != null)
        {
            folderView.Item = item;
        }

        if (textView != null)
        {
            textView.Item = item;
        }

        StateHasChanged();
    }

    public void OnGoBtnClicked(MouseEventArgs e)
    {
        var address = (formRepoName, formLocaName);
        ReloadItem(address);
    }

    public string GetItem((string Repo, string Loca) address)
    {
        var itemJson = backendService.CommandApi("GetItem", address.Repo, address.Loca);
        return itemJson;
    }

    private async Task OnBackArrowBtnClicked(MouseEventArgs e)
    {
        var newAddress = IUniAddressOperations
             .MoveOneLocaBack(item.Address);
        var newAdrTuple = IUniAddressOperations
             .CreateAddressFromString(newAddress);
        ReloadItem(newAdrTuple);
    }
}
